{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Natasha Jha\\\\Downloads\\\\GDrive-Party-master\\\\src\\\\pages\\\\HowToUse.js\";\nimport React from \"react\";\nimport Button from \"react-bootstrap/cjs/Button\";\nimport Container from \"react-bootstrap/cjs/Container\";\nimport Row from \"react-bootstrap/cjs/Row\";\nimport Accordion from \"react-bootstrap/cjs/Accordion\";\nimport Card from \"react-bootstrap/cjs/Card\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nlet how_tos = [{\n  \"question\": \"What is GDrive-Party?\",\n  \"answer\": \"GDrive Party is a service which lets you watch synchronised video with your friends \\\n        similar to 'Netflix Party'.\"\n}, {\n  \"question\": \"What video(s) can I watch with my friends?\",\n  \"answer\": \"GDrive Party currently supports YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, DailyMotion, \\\n        \\ and ofcourse Videos from Google Drive.\"\n}, {\n  \"question\": \"Is GDrive-Party Free?\",\n  \"answer\": \"GDrive-Party is absolutely free! You can help improve it at https://github.com/RafaeNoor/GDrive-Party .\"\n}, {\n  \"question\": \"How can I use GDrive-Party?\",\n  \"answer\": \"On the main page, you would enter a Display name which will be shown in your party chat. Then you\\ \" + \"you would copy the video URL from the previously mentioned support platforms and paste that into the Video Address \\\n            textbox. Clicking the 'Start Party' button below that would create a new lobby where you would be shown a 'room_id'. Your \\ \\\n            friends would use that room_id and enter that into the Room ID textbox on the main page and press 'Join Party' below that. They would \\ \\\n            then be added into your lobby. From their, only the Host can control video playback such as Play/Pause and seeking.\"\n}, {\n  \"question\": \"What other features does GDrive-Party offer?\",\n  \"answer\": \"Once a Room is created, the host has additional controls; They can create a video queue \\\n        and as such can use the room to watch multiple videos. These videos can span all the platforms listed \\\n        above.\"\n}];\nclass HowToUse extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"pairs\": how_tos\n    };\n  }\n  build_accord(pairs) {\n    let cards = [];\n    pairs.forEach((pair, idx) => {\n      cards.push( /*#__PURE__*/React.createElement(Card, {\n        style: {\n          width: '50rem',\n          backgroundColor: 'black'\n        },\n        variant: \"dark\",\n        text: \"light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Accordion.Toggle, {\n        as: Button,\n        variant: \"outline-light\",\n        eventKey: idx.toString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }\n      }, pair.question)), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n        eventKey: idx.toString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }\n      }, pair.answer))));\n    });\n    return /*#__PURE__*/React.createElement(Accordion, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, cards);\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'black',\n        minHeight: '100vh',\n        minWidth: '200vh'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      className: 'justify-content-md-center',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, this.build_accord(this.state.pairs))));\n  }\n}\nexport default HowToUse;","map":{"version":3,"names":["React","Button","Container","Row","Accordion","Card","how_tos","HowToUse","Component","constructor","props","state","build_accord","pairs","cards","forEach","pair","idx","push","createElement","style","width","backgroundColor","variant","text","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Header","Toggle","as","eventKey","toString","question","Collapse","Body","answer","render","minHeight","minWidth","className"],"sources":["C:/Users/Natasha Jha/Downloads/GDrive-Party-master/src/pages/HowToUse.js"],"sourcesContent":["import React from \"react\";\nimport Button from \"react-bootstrap/cjs/Button\";\n\nimport Container from \"react-bootstrap/cjs/Container\";\nimport Row from \"react-bootstrap/cjs/Row\";\nimport Accordion from \"react-bootstrap/cjs/Accordion\";\nimport Card from \"react-bootstrap/cjs/Card\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nlet how_tos= [\n    {\n        \"question\": \"What is GDrive-Party?\",\n        \"answer\": \"GDrive Party is a service which lets you watch synchronised video with your friends \\\n        similar to 'Netflix Party'.\"\n    },\n    {\n        \"question\": \"What video(s) can I watch with my friends?\",\n        \"answer\": \"GDrive Party currently supports YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, DailyMotion, \\\n        \\ and ofcourse Videos from Google Drive.\"\n    },\n    {\n        \"question\": \"Is GDrive-Party Free?\",\n        \"answer\": \"GDrive-Party is absolutely free! You can help improve it at https://github.com/RafaeNoor/GDrive-Party .\"\n    },\n    {\n        \"question\": \"How can I use GDrive-Party?\",\n        \"answer\": \"On the main page, you would enter a Display name which will be shown in your party chat. Then you\\ \" +\n            \"you would copy the video URL from the previously mentioned support platforms and paste that into the Video Address \\\n            textbox. Clicking the 'Start Party' button below that would create a new lobby where you would be shown a 'room_id'. Your \\ \\\n            friends would use that room_id and enter that into the Room ID textbox on the main page and press 'Join Party' below that. They would \\ \\\n            then be added into your lobby. From their, only the Host can control video playback such as Play/Pause and seeking.\"\n    },\n    {\n        \"question\":\"What other features does GDrive-Party offer?\",\n        \"answer\": \"Once a Room is created, the host has additional controls; They can create a video queue \\\n        and as such can use the room to watch multiple videos. These videos can span all the platforms listed \\\n        above.\"\n    }\n\n];\n\n\nclass HowToUse extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\"pairs\": how_tos};\n    }\n\n    build_accord(pairs){\n        let cards = [];\n\n        pairs.forEach( (pair,idx) => {\n            cards.push(\n                <Card style={{ width: '50rem', backgroundColor: 'black' }} variant=\"dark\" text={\"light\"}>\n                    <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"outline-light\" eventKey={idx.toString()}>\n                            {pair.question}\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey={idx.toString()}>\n                        <Card.Body>{pair.answer}</Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            )\n        });\n\n        return (\n            <Accordion>\n                {cards}\n            </Accordion>\n        );\n\n    }\n\n    render() {\n        return (\n            <div style={{ backgroundColor: 'black', minHeight: '100vh', minWidth:'200vh' }}>\n                <Container>\n                    <br />\n                    <Row className={'justify-content-md-center'}>\n                        {this.build_accord(this.state.pairs)}\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n    \n}\n\nexport default HowToUse;"],"mappings":"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"},"metadata":{},"sourceType":"module"}